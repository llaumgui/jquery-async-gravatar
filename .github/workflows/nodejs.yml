name: Node.js CI/CD

on:
  [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and test

    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]

    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install globally grunt-cli
        run: npm install -g grunt-cli

      - name: Install other dependencies
        run: npm install

      - name: Build .min.js file
        run: npm run build

      - name: Run tests (QA and unit tests)
        run: npm test

      - name: SonarCloud Scan
        if: matrix.node-version == '12.x'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Archive artifacts
        if: matrix.node-version == '12.x'
        uses: actions/upload-artifact@v2
        with:
          name: jquery.async-gravatar-${{ github.sha }}.min.js
          path: dist/*.min.js

      - name: Package
        if: matrix.node-version == '12.x' && (github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v'))
        run: npm run release

      - name: Archive package
        if: matrix.node-version == '12.x' && (github.ref == 'refs/heads/master' || contains(github.ref, 'refs/tags/v'))
        uses: actions/upload-artifact@v2
        with:
          name: jquery-async-gravatar-${{ github.sha }}.tar.gz
          path: build/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/tags/v')
    name: Release on GitHub and NPM

    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set env
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF:10}

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install globally grunt-cli
        run: npm install -g grunt-cli

      - name: Install other dependencies
        run: npm install

      - name: Package
        run: npm run release

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false

      - name: Upload asset in GitHub release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: build/jquery-async-gravatar-${{ env.RELEASE_VERSION }}.tar.gz
          asset_name: jquery-async-gravatar-${{ env.RELEASE_VERSION }}.tar.gz
          asset_content_type: application/tar+gzip

      - name: Create NPM release
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
